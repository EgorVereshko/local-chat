import React, { useState, useEffect, useRef } from 'react';

interface Props {
  user: { name: string; room: string };
  logout: () => void;
}

interface Message {
  user: string;
  content: string;
  timestamp: string;
  imageUrl?: string;
}

const ChatRoom: React.FC<Props> = ({ user, logout }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [quotedMessage, setQuotedMessage] = useState<Message | null>(null);
  const [image, setImage] = useState<File | null>(null);
  const messagesEndRef = useRef<HTMLDivElement | null>(null);

  const emojiList = [
    'üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä', 'üòé', 'üòç', 'üòã', 'üòú', 'üòù', 'üòÖ', 'üòá', 'ü§©',
    'üòç', 'ü•∞', 'üòò', 'üòô', 'ü§®', 'üßê', 'ü§ì', 'üò¢', 'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò±', 'üò®', 'üò•', 'üòì', 'ü§ó', 'ü§Ø',
    'üò≥', 'üôÑ', 'üò°', 'ü•µ', 'üòà', 'ü•∂', 'üò¨', 'üòë', 'ü§¢', 'ü§Æ', 'ü§ë', 'üò¥', 'üíÄ', 'ü§°', 'üí©', 'üò∏', '‚ò†Ô∏è', 'üëæ',
  ];

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ localStorage –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    const savedMessages = localStorage.getItem(user.room);
    if (savedMessages) {
      setMessages(JSON.parse(savedMessages));
    }
  }, [user.room]);

  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç –≤–Ω–∏–∑, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleSendMessage = () => {
    if (newMessage.trim() === '' && !image) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    const newMsg: Message = {
      user: user.name,
      content: newMessage,
      timestamp: new Date().toLocaleTimeString(),
    };

    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (image) {
      const reader = new FileReader();
      reader.onloadend = () => {
        const newMsgWithImage: Message = {
          ...newMsg,
          imageUrl: reader.result as string,
        };

        const updatedMessages = [...messages, newMsgWithImage];
        setMessages(updatedMessages);
        localStorage.setItem(user.room, JSON.stringify(updatedMessages));
        setImage(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      };
      reader.readAsDataURL(image);
    } else {
      const updatedMessages = [...messages, newMsg];
      setMessages(updatedMessages);
      localStorage.setItem(user.room, JSON.stringify(updatedMessages));
    }

    setNewMessage('');
    setQuotedMessage(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
  };

  const handleEmojiClick = (emoji: string) => {
    setNewMessage(prev => prev + emoji);
    setShowEmojiPicker(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —ç–º–æ–¥–∑–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
  };

  const handleQuoteMessage = (msg: Message) => {
    setQuotedMessage(msg);
    setNewMessage(`"${msg.content || 'img'}" ‚Äî ${msg.user}: `); // –í—Å—Ç–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setImage(file);
    }
  };

  const imageBtnStyle = image ? { backgroundColor: 'yellow', borderRadius: '50%' } : {};
  
  return (
    <div className='chatBox'>
      <div className='chatHeader'>
        <h2>–ö–æ–º–Ω–∞—Ç–∞: {user.room}</h2>
        <div className="closeChat" onClick={logout}></div>
      </div>

      <div className='horizontal-line'></div>
      
      <div className='chatContainer'>
        {messages.map((msg, index) => (
          <div className='message' key={index}>
            <strong>{msg.user}</strong> <p className='messageTime'>[{msg.timestamp}]:</p> <p className='messageContent'>{msg.content}</p>
            {msg.imageUrl && <img src={msg.imageUrl} alt="sent" className="messageImage" />}
            <button className='quoteBtn' onClick={() => handleQuoteMessage(msg)}></button>
          </div>
        ))}
        <div ref={messagesEndRef}></div>
      </div>

      <div className='horizontal-line'></div>

      <div className='inputPanel'>
        <button className='emojiBtn' onClick={() => setShowEmojiPicker(prev => !prev)}></button>

        <input
          type="file" 
          accept="image/*" 
          onChange={handleImageChange} 
          style={{ display: 'none' }}
          id="imageInput"
        />
        <label htmlFor="imageInput" className="imageBtn" style={imageBtnStyle}></label>

        <input
          className='chatInput'
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          onKeyDown={(e) => {
            if (e.key == 'Enter') {
              e.preventDefault();
              handleSendMessage();
            }
          }}
        />
        <button className='enterBtn' onClick={handleSendMessage}></button>  
      </div>   
      
      {showEmojiPicker && (
        <div style={{ position: 'absolute', bottom: '60px', border: '1px solid #ccc', padding: '10px', backgroundColor: 'rgba(255, 255, 255, 0.5)' }}>
          {emojiList.map((emoji, index) => (
            <button
              className='emojiList'
              key={index}
              onClick={() => handleEmojiClick(emoji)}
              style={{ fontSize: '20px', margin: '5px' }}
            >
              {emoji}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default ChatRoom;
